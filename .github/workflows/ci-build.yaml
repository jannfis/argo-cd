name: Integration tests
on: 
  push:
    branches:
      - 'master' 
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    name: Build & cache all packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.2'
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Compile all packages
        run: make build-local
  test:
    name: Run unit tests for all packages
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Create checkout directory
        run: mkdir -p ~/go/src/github.com/argoproj
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create symlink in GOPATH
        run: ln -s $(pwd) ~/go/src/github.com/argoproj/argo-cd
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.2'
      - name: Install required packages
        run: |
          sudo apt-get install git -y
      - name: Switch to temporal branch so we re-attach head
        run: |
          git switch -c temporal-pr-branch
          git status
      - name: Fetch complete history for blame information
        run: |
          git fetch --prune --no-tags --depth=1 origin +refs/heads/*:refs/remotes/origin/*
      - name: Add ~/go/bin to PATH
        run: echo "::add-path::/home/runner/go/bin"
      - name: Add /usr/local/bin to PATH
        run: echo "::add-path::/usr/local/bin"
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Install tools required for local execution
        run: make install-tools-local
      - name: Setup git username and email
        run: |
          git config --global user.name "John Doe"
          git config --global user.email "john.doe@example.com"
      - name: Download and vendor all required packages
        run: |
          go mod download
      - name: Run all unit tests
        run: make test-local
  codegen:
    name: Generate dynamic assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.2'
      - name: Create symlink in GOPATH
        run: |
          mkdir -p ~/go/src/github.com/argoproj
          cp -a ../argo-cd ~/go/src/github.com/argoproj
      - name: Add /usr/local/bin to PATH
        run: echo "::add-path::/usr/local/bin"
      - name: Add ~/go/bin to PATH
        run: echo "::add-path::/home/runner/go/bin"
      - name: Download & vendor dependencies
        run: |
          go mod download
          go mod vendor -v
        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd
      - name: Install tools required for local execution
        run: make install-tools-local
        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd
      - name: Initialize local Helm
        run: |
          helm2 init --client-only
      - name: Run codegen
        run: |
          set -x
          export GOPATH=$(go env GOPATH)
          make codegen-local
        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd
      - name: Check nothing has changed
        run: |
          set -xo pipefail
          git diff --exit-code -- . ':!go.sum' ':!go.mod' ':!assets/swagger.json' | tee codegen.patch
        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd
  test-e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/go
      ARGOCD_FAKE_IN_CLUSTER: "true"
      ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
      ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
      ARGOCD_E2E_K3S: "true"
      ARGOCD_IN_CI: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.14.2'
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: v1.0.1
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          kubectl version
      - name: Add /usr/local/bin to PATH
        run: echo "::add-path::/usr/local/bin"
      - name: Add ~/go/bin to PATH
        run: echo "::add-path::/home/runner/go/bin"
      - name: Download & vendor dependencies
        run: |
          go mod download
          go mod vendor -v
      - name: Install tools required for local execution
        run: make install-tools-local
      - name: Install goreman
        run: |
          go get github.com/mattn/goreman
      - name: Setup git username and email
        run: |
          git config --global user.name "John Doe"
          git config --global user.email "john.doe@example.com"

      - name: Run E2E server and wait for it being available
        timeout-minutes: 30
        run: |
          set -x
          make start-e2e-local &
          count=1
          until curl http://localhost:8080/healthz; do
            sleep 10;
            if test $count -ge 60; then
              echo "Timeout"
              exit 1
            fi
            count=$((count+1))
          done
      